{"version":3,"sources":["tmdb.js","components/MovieRow.js","components/FeaturedMovie.js","components/Header.js","assets/loading.svg","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","items","getMovieInfo","movieId","type","info","MovieRow","useState","scrollX","setScrollX","className","onClick","x","Math","round","window","innerWidth","style","fontSize","listWidth","results","length","marginLeft","map","item","key","src","poster_path","alt","original_title","FeaturedMovie","firstDate","Date","first_air_date","genres","i","push","name","movieDescription","overview","substr","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","Header","black","App","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","useEffect","tmdb","list","originals","filter","randomChosen","floor","random","chosen","chosenInfo","loadAll","scrollListener","scrollY","addEventListener","removeEventListener","role","aria-label","loadingGif","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e06f124.chunk.js","sourcesContent":["/* eslint-disable import/no-anonymous-default-export */\r\nconst API_KEY = 'f939a671da936b1efe1fb3507cd7fb6f';\r\nconst API_BASE = 'https://api.themoviedb.org/3';\r\n\r\n/* \r\n- originais da netflix\r\n- recomendados (trending)\r\n- em alta (top rated)\r\n- ação\r\n- comédia\r\n- terror\r\n- romance\r\n- documentários\r\n*/\r\n\r\nconst basicFetch = async (endpoint) => {\r\n    const req = await fetch(`${API_BASE}/${endpoint}`);\r\n    const json = await req.json();\r\n    return json;\r\n}\r\n\r\nexport default {\r\n    getHomeList: async () => {\r\n        return [\r\n            {\r\n                slug: 'originals',\r\n                title: 'Originais do Netflix',\r\n                items: await basicFetch(`discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'trending',\r\n                title: 'Recomendados para Você',\r\n                items: await basicFetch(`trending/all/week?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'toprated',\r\n                title: 'Em Alta',\r\n                items: await basicFetch(`movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'action',\r\n                title: 'Ação',\r\n                items: await basicFetch(`discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'comedy',\r\n                title: 'Comédia',\r\n                items: await basicFetch(`discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'horror',\r\n                title: 'Terror',\r\n                items: await basicFetch(`discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'romance',\r\n                title: 'Romance',\r\n                items: await basicFetch(`discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\r\n            },\r\n            {\r\n                slug: 'documentary',\r\n                title: 'Documentário',\r\n                items: await basicFetch(`discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\r\n            }\r\n        ]\r\n    },\r\n    getMovieInfo: async (movieId, type) => {\r\n        let info = {};\r\n\r\n        if(movieId) {\r\n            switch(type) {\r\n                case 'movie':\r\n                    info = await basicFetch(`movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                    break;\r\n                case 'tv':\r\n                    info = await basicFetch(`tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\r\n                    break;\r\n                default:\r\n                    info = null;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return info;\r\n    }\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nimport './MovieRow.css';\r\n\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nexport default function MovieRow({title, items}) {\r\n\r\n    const [scrollX, setScrollX] = useState(-400);\r\n\r\n    function handleLeftArrow() {\r\n        let x = scrollX + Math.round(window.innerWidth / 2);\r\n\r\n        if (x > 0) {\r\n            x = 0;\r\n        }\r\n\r\n        setScrollX(x);\r\n    }\r\n\r\n    function handleRightArrow() {\r\n        let x = scrollX - Math.round(window.innerWidth / 2);\r\n\r\n        let listWidth = items.results.length * 150;\r\n\r\n        if ((window.innerWidth - listWidth) > x) {\r\n            x = (window.innerWidth - listWidth) - 60;\r\n        }\r\n\r\n        setScrollX(x);\r\n    }\r\n\r\n    return (\r\n        <div className=\"movieRow\">\r\n            <h2>{title}</h2>\r\n\r\n            <div className=\"movieRow--left\" onClick={handleLeftArrow}>\r\n                <NavigateBeforeIcon style={{ fontSize: 50 }} />\r\n            </div>\r\n\r\n            <div className=\"movieRow--right\" onClick={handleRightArrow}>\r\n                <NavigateNextIcon style={{ fontSize: 50 }} />\r\n            </div>\r\n\r\n            <div className=\"movieRow--listarea\">\r\n                <div className=\"movieRow--list\" style={{ \r\n                        marginLeft: scrollX\r\n                    }}\r\n                >\r\n                    {items.results.length > 0 && items.results.map((item, key) => (\r\n                        <div key={key} className=\"movieRow--item\">\r\n                            <img src={`https://image.tmdb.org/t/p/w200${item.poster_path}`} alt={item.original_title} />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\n\r\nimport \"./FeaturedMovie.css\";\r\n\r\nexport default function FeaturedMovie({ item }) {\r\n  let firstDate = new Date(item.first_air_date);\r\n\r\n  let genres = [];\r\n  for (let i in item.genres) {\r\n    genres.push(item.genres[i].name);\r\n  }\r\n\r\n  let movieDescription = item.overview;\r\n\r\n  if (item.overview.length > 200) {\r\n    movieDescription = item.overview.substr(0, 200) + \"...\";\r\n  }\r\n\r\n  return (\r\n    <section\r\n      className=\"featured\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`,\r\n      }}\r\n    >\r\n      <div className=\"featured--vertical\">\r\n        <div className=\"featured--horizontal\">\r\n          <div className=\"featured--name\">{item.original_name}</div>\r\n          <div className=\"featured--info\">\r\n            <div className=\"featured--points\">{item.vote_average} pontos</div>\r\n            <div className=\"featured--year\">{firstDate.getFullYear()}</div>\r\n            <div className=\"featured--seasons\">\r\n              {item.number_of_seasons}\r\n              {item.number_of_seasons > 1 ? \" temporadas\" : \" temporada\"}\r\n            </div>\r\n          </div>\r\n          <div className=\"featured--description\">{movieDescription}</div>\r\n          <div className=\"featured--buttons\">\r\n            <a href={`watch/${item.id}`} className=\"featured--watchbutton\">\r\n              <PlayArrowIcon /> Assistir\r\n            </a>\r\n            <a href={`add/${item.id}`} className=\"featured--mylistbutton\">\r\n              + Minha Lista\r\n            </a>\r\n          </div>\r\n          <div className=\"featured--genres\">\r\n            <strong>Gêneros: </strong>\r\n            {genres.join(\", \")}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport './Header.css';\r\n\r\nexport default function Header({ black }) {\r\n    return (\r\n        <header className={black ? 'black' : ''}>\r\n            <div className=\"header--logo\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1280px-Netflix_2015_logo.svg.png\" alt=\"Netflix\" />\r\n                </a>\r\n            </div>\r\n\r\n            <div className=\"header--user\">\r\n                <a href=\"/\">\r\n                    <img src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" alt=\"Usuário\" />\r\n                </a>\r\n            </div>\r\n        </header>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/loading.b15f5eba.svg\";","import React, { useEffect, useState } from \"react\";\n\nimport \"./App.css\";\n\nimport tmdb from \"./tmdb\";\n\nimport MovieRow from \"./components/MovieRow\";\nimport FeaturedMovie from \"./components/FeaturedMovie\";\nimport Header from './components/Header';\n\nimport loadingGif from './assets/loading.svg';\n\nexport default function App() {\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect(() => {\n    const loadAll = async () => {\n      // Pegando todas as informações das listas\n\n      let list = await tmdb.getHomeList();\n\n      setMovieList(list);\n\n      // Pegando o Featured\n      let originals = list.filter((i) => i.slug === \"originals\");\n\n      let randomChosen = Math.floor(\n        Math.random() * (originals[0].items.results.length - 1)\n      );\n\n      let chosen = originals[0].items.results[randomChosen];\n\n      let chosenInfo = await tmdb.getMovieInfo(chosen.id, \"tv\");\n\n      setFeaturedData(chosenInfo);\n    };\n\n    loadAll();\n  }, []);\n\n  useEffect(() => {\n    const scrollListener = () => {\n      if(window.scrollY > 30) {\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    };\n\n    window.addEventListener('scroll', scrollListener);\n\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    }\n\n  }, []);\n\n  return (\n    <div className=\"page\">\n\n      <Header black={blackHeader} />\n\n      {featuredData && <FeaturedMovie item={featuredData} />}\n\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieRow key={key} title={item.title} items={item.items} />\n        ))}\n      </section>\n\n      <footer>\n          Feito com <span role=\"img\" aria-label=\"coração\">❤</span> por&nbsp;\n          <a href=\"https://filiperochs.github.io\">Filipe R.</a><br />\n          Direitos de imagem para Netflix<br />\n          Dados disponibilizados da API pública&nbsp;\n          <a href=\"https://www.themoviedb.org/\">TMDb</a>\n      </footer>\n      \n      {(movieList.length <= 0 && featuredData) &&\n        <div className=\"loading\">\n          <img src={loadingGif} alt=\"Carregando...\" />\n        </div>\n      }\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}